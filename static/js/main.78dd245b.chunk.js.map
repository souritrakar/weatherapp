{"version":3,"sources":["finallogo.png","Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","className","temp","condition","humidity","feelslike","windspeed","clouds","App","apiCallforWeather","cityName","fetch","then","res","status","json","alert","response","console","log","weatherdata","push","setState","hasLoadedWeatherInfo","weatherFetchingData","Math","floor","main","feels_like","wind","speed","all","weather","catch","err","state","lat","long","userCity","userCountry","userState","hasLoadedCoords","hasloadedData","localWeatherdata","hasPressedButton","document","addEventListener","event","preventDefault","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","city","country","regionName","this","toLowerCase","localarray","content","coordcontent","weathercontent","style","color","src","weatherlogo","fontWeight","fontFamily","map","data","onChange","e","target","value","type","name","placeholder","onClick","class","align","rel","round","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78dd245b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/finallogo.f7301e5f.png\";","import React from \"react\"\n\nexport default function Weather(props){\n    return(\n        <div className=\"weathercard\">\n            <h3> Temperature : {props.temp}°C </h3>\n    <h3>Condition : {props.condition}</h3>\n    <h3> Humidity : {props.humidity} </h3>\n    <h3>Feels Like: {props.feelslike} °C</h3>\n    <h3>Wind Speed : {props.windspeed}</h3>\n    <h3>Clouds : {props.clouds}</h3>\n        </div>\n    )\n}","\nimport './App.css';\nimport React from \"react\"\nimport weatherlogo from \"./finallogo.png\"\nimport Weather from \"./Weather\"\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      lat:\"\",\n      long:\"\",\n      cityName:\"\",\n      userCity:\"\",\n      userCountry:\"\",\n      userState:\"\",\n      hasLoadedCoords:false,\n  hasloadedData:false,\n      localWeatherdata:[],\n      hasPressedButton:false,\n      hasLoadedWeatherInfo:false,\n      weatherFetchingData:[],\n      temp:\"\",\n      feelslike:\"\",\n      humidity:\"\",\n      clouds:\"\",\n      windspeed:\"\",\n      condition:\"\"\n\n    }\n  }\n async componentDidMount(){\n  document.addEventListener('contextmenu', event => event.preventDefault());\n   alert(\"You have to give your location access in order to see local weather info\")\n   if(navigator.geolocation){\n     navigator.geolocation.getCurrentPosition(position=>{\n       this.setState({lat:position.coords.latitude})\n       this.setState({long:position.coords.longitude})\n       this.setState({hasLoadedCoords:true})\n     })\n   }\n   else{\n     alert(\"Error in receiving location access\")\n   }\n   await fetch(\"http://ip-api.com/json\").then((res)=>{\n     if(res.status===200){\n       return res.json()\n     }\n     else{\n       alert(\"Cannot find Location\")\n     }\n\n  \n  }).then((response)=>{\n    \n     this.setState({userCity:response.city})\n     this.setState({userCountry:response.country})\n     this.setState({userState:response.regionName})\n     this.setState({hasloadedData:true})\n   })\n   await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+this.state.userCity.toLowerCase()+\"&appid=d7977aee4febe67766e9ef79abf45f2a\").then((res)=>{\n     if(res.status===200){\n       return res.json()\n     }\n     else{\n       alert(\"Error\")\n     }\n   }).then((response)=>{\n     console.log(response)\n     var localarray=[]\n     localarray.push(response)\n     this.setState({localWeatherdata:localarray})\n    \n\n   })\n }\n\n apiCallforWeather=  (cityName)=>{\nreturn fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+cityName+\"&appid=d7977aee4febe67766e9ef79abf45f2a\").then(res=>{\n\nif(res.status==200){\n\nreturn res.json()\n}\nelse{\n  alert(\"There was an error. Put the correct city name and try again\")\n}\n}).then((response)=>{\n  if(response){\n  console.log(response)\n  var weatherdata=[]\n  weatherdata.push(response)\n  this.setState({hasLoadedWeatherInfo:true})\n  this.setState({weatherFetchingData:weatherdata})\n  this.setState({temp:Math.floor(response.main.temp-273.15)})\n  this.setState({humidity:response.main.humidity})\n  this.setState({feelslike:response.main.feels_like})\n  this.setState({windspeed:response.wind.speed})\n  this.setState({clouds:response.clouds.all})\n  this.setState({condition:response.weather[0].main})\n  alert(\"Loaded details ⬇\")\n}\nelse{\n  return null\n}\n}).catch(err=>{console.log(err)})\n\n}\n\n  render(){\nvar content;\nif(this.state.hasloadedData===true){\n  content=  <h2 style={{color:\"lightsalmon\"}}>Location : {this.state.userCity} , {this.state.userState} , {this.state.userCountry}</h2>\n}\nelse{\n  content=<h2>Loading...</h2>\n\n}\n\nvar coordcontent;\nif(this.state.hasLoadedCoords===true){\n  coordcontent=      <h3>Coordinates: Lat: {this.state.lat}, Long: {this.state.long}</h3>\n}\nelse{\n  coordcontent= <h3>Loading...</h3>\n}\nvar weathercontent;\nif(this.state.hasLoadedWeatherInfo===false && this.state.hasPressedButton===true){\n  weathercontent=<h4>Loading info...</h4>\n}\n\n\n \n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <img  className=\"logoimg\"src={weatherlogo}/>\n      <center><h1>Weather App</h1></center> \n\n    \n    \n       <h1 style={{fontWeight:\"bold\",fontFamily:\"sans-serif\",color:\"#3a7bd5\"}} className=\"getweather\">Get the weather conditions for any city!</h1>\n     \n       <br></br>\n \n {content}\n\n {\n   \n   this.state.localWeatherdata.map(data=>{\n     return(\n       <div>\n\n     <center><h3> Condition: {data.weather[0].main}</h3></center>\n     <center><h3>Temperature: {Math.floor(data.main.temp-273.15)}°C</h3></center>\n    <center> <h3>Feels like: {Math.floor(data.main.feels_like-273.15)}°C</h3></center>\n    <center> <h3>Wind Speed: {data.wind.speed}</h3></center>\n     <center>{coordcontent}</center>\n \n\n     </div>\n     )\n   })\n }\n <input onChange={(e)=>{this.setState({cityName:e.target.value})}} className=\"input100\" type=\"text\" name=\"username\" placeholder=\"Enter any City Name to know its Weather Info!\"></input>\n <br></br>\n\n <center><div  onClick={()=>{this.apiCallforWeather(this.state.cityName.toLowerCase())}} class=\"button_cont\" align=\"center\"><a class=\"example_a\" rel=\"nofollow noopener\">Get Weather</a></div></center>\n{weathercontent}\n {\n   this.state.hasLoadedWeatherInfo && \n  (\n  <Weather temp={this.state.temp} humidity={this.state.humidity} feelslike={Math.round(this.state.feelslike-273.15)} windspeed={this.state.windspeed}  condition={this.state.condition}clouds={this.state.clouds}/>\n)\n  \n }\n\n {\n\n/*this.state.hasLoadedWeatherInfo && this.state.hasPressedButton &&\nthis.state.weatherFetchingData.map(data=>{\n(\n    <Weather/>\n  )\n})*/\n\n }\n <br></br>\n\n <h1 style={{color:\"lightpink\"}}>Souritra Kar 2020</h1>\n <h2 style={{color:\"mediumpurple\"}}>Uses: openweathermap.org API</h2>\n      </header>\n  \n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}